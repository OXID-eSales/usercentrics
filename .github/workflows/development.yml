name: Development

on: [ push, pull_request ]

env:
  PACKAGE_NAME: 'oxid-professional-services/usercentrics'

jobs:
  install_shop_with_module:
    strategy:
      matrix:
        php: [ '8.0' ]
    runs-on: ubuntu-latest
    steps:
      - name: Clone testing environment
        run: git clone https://github.com/OXID-eSales/docker-eshop-sdk.git .

      - name: Clone the shop
        run: git clone --depth 1 https://github.com/OXID-eSales/oxideshop_ce.git --branch b-7.0.x --single-branch source

      - name: Cache current installation
        uses: actions/cache@v2
        with:
          path: |
            ./*
          key: development-${{ matrix.php }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Prepare container configuration
        run: |
          make setup
          make addbasicservices
          perl -pi\
            -e "s#PHP_VERSION=.*#PHP_VERSION=${{ matrix.php }}#g;"\
            .env

          perl -pi\
            -e 's#display_errors =.*#display_errors = false#g;'\
            -e 'print "xdebug.max_nesting_level=1000\nxdebug.mode=coverage\n\n" if eof'\
            containers/php/custom.ini

          perl -pi\
            -e 's#/var/www/#/var/www/source/#g;'\
            containers/httpd/project.conf

      - name: Prepare shop configuration
        run: |
          cp source/source/config.inc.php.dist source/source/config.inc.php
          sed -i "1s+^+SetEnvIf Authorization "\(.*\)" HTTP_AUTHORIZATION=\$1\n\n+" source/source/.htaccess
          sed -i -e 's/<dbHost>/mysql/'\
                 -e 's/<dbUser>/root/'\
                 -e 's/<dbName>/example/'\
                 -e 's/<dbPwd>/root/'\
                 -e 's/<dbPort>/3306/'\
                 -e 's/<sShopURL>/http:\/\/localhost.local\//'\
                 -e 's/<sShopDir>/\/var\/www\/source\//'\
                 -e 's/<sCompileDir>/\/var\/www\/source\/tmp\//'\
              source/source/config.inc.php

      - name: Start containers
        run: |
          make up
          sleep 2

      - name: Checkout current module
        uses: actions/checkout@v3
        with:
          path: source/test-module

      - name: Configure module package to be installed
        run: |
          docker-compose exec -T \
            php composer config repositories.${{ env.PACKAGE_NAME }} \
            --json '{"type":"path", "url":"./test-module", "options": {"symlink": true}}'
          docker-compose exec -T \
            php composer require ${{ env.PACKAGE_NAME }}:* --no-interaction --no-update

      - name: Install all configured dependencies and reset shop
        run: |
          docker-compose exec -T php composer update --no-interaction
          docker-compose exec -T php bin/oe-console oe:database:reset --db-host=mysql --db-port=3306 --db-name=example --db-user=root --db-password=root --force

      - name: Stop containers
        run: |
          docker-compose down
          sleep 2

  unit_tests:
    strategy:
      matrix:
        php: [ '8.0' ]
    needs: [ install_shop_with_module ]
    runs-on: ubuntu-latest
    steps:
      - name: Load current installation from cache
        uses: actions/cache@v2
        with:
          path: |
            ./*
          key: development-${{ matrix.php }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            development-${{ matrix.php }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Start containers
        run: |
          make up
          sleep 2

      - name: Activate the module
        run: |
          docker-compose exec -T php bin/oe-console oe:module:activate oxps_usercentrics

      - name: Run tests
        run: |
          docker-compose exec -T \
            -e XDEBUG_MODE=coverage \
            php vendor/bin/phpunit \
              -c vendor/${{ env.PACKAGE_NAME }}/tests/phpunit.xml \
              --bootstrap=source/bootstrap.php \
              --coverage-clover=/var/www/coverage.xml \
              --coverage-text \
              --log-junit=/var/www/junit-log.xml \
            vendor/${{ env.PACKAGE_NAME }}/tests

      - name: Stop containers
        if: always()
        run: |
          make down
          sleep 2

      - name: Upload log artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: TestsLog-${{ matrix.php }}
          path: |
            source/coverage.xml
            source/junit-log.xml

  codeception_smarty:
    strategy:
      matrix:
        php:
          - '8.0'
        group:
          - 'usercentrics'
    needs: [ install_shop_with_module ]
    runs-on: ubuntu-latest
    steps:
      - name: Load current installation from cache
        uses: actions/cache@v2
        with:
          path: |
            ./*
          key: development-${{ matrix.php }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            development-${{ matrix.php }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Start containers
        run: |
          make file=services/selenium-chrome.yml addservice
          make up
          sleep 2

      - name: Install smarty components
        run: |
          docker-compose exec -T php composer require oxid-esales/flow-theme:dev-b-7.0.x --no-interaction --no-update
          docker-compose exec -T php composer require oxid-esales/smarty-component:dev-b-7.0.x --no-interaction --no-update
          docker-compose exec -T php composer require oxid-esales/smarty-admin-theme:dev-b-7.0.x --no-interaction --no-update
          docker-compose exec -T php composer update --no-interaction

      - name: Activate the module
        run: |
          docker-compose exec -T php bin/oe-console oe:module:activate oxps_usercentrics

      - name: Run tests
        run: |
          docker-compose exec -T \
            -e SELENIUM_SERVER_HOST=selenium \
            -e MODULE_IDS=oxps_usercentrics \
            php php vendor/bin/codecept run acceptance \
              --bootstrap=/var/www/source/bootstrap.php \
              -c /var/www/vendor/${{ env.PACKAGE_NAME }}/tests/codeception.yml \
              -g ${{ matrix.group }}

      - name: Stop containers
        if: always()
        run: |
          make down
          sleep 2

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Output-${{ matrix.php }}-flow
          path: |
            ./source/test-module/tests/Codeception/_output/*

  codeception_twig:
    strategy:
      matrix:
        php: [ '8.0' ]
        group:
          - 'usercentrics'
    needs: [ install_shop_with_module ]
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup workspace
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Cleanup Docker
        run: |
          c=$(docker ps -q) && [[ $c ]] && docker kill $c
          docker system prune --force

      - name: Load current installation from cache
        uses: actions/cache@v2
        with:
          path: |
            ./*
          key: development-${{ matrix.php }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            development-${{ matrix.php }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Start containers
        run: |
          make file=services/selenium-chrome.yml addservice
          make up
          sleep 2

      - name: Install twig components
        run: |
          docker-compose exec -T \
            php composer require oxid-esales/twig-component:dev-b-7.0.x --no-interaction --no-update
          docker-compose exec -T \
            php composer require oxid-esales/twig-theme:dev-b-7.0.x --no-interaction --no-update
          docker-compose exec -T \
            php composer require oxid-esales/twig-admin-theme:dev-b-7.0.x --no-interaction --no-update
          docker-compose exec -T php composer update --no-interaction

      - name: Configure codeception Theme switcher
        run: |
          perl -pi \
          -e 's#theme_id:\s?flow#theme_id: twig#g;' \
          source/test-module/tests/Codeception/acceptance.suite.yml

      - name: Run tests
        run: |
          docker-compose exec -T \
            -e SELENIUM_SERVER_HOST=selenium \
            -e MODULE_IDS=oxps_usercentrics \
            php php vendor/bin/codecept run acceptance \
              --bootstrap=/var/www/source/bootstrap.php \
              -c /var/www/vendor/${{ env.PACKAGE_NAME }}/tests/codeception.yml \
              -g ${{ matrix.group }}

      - name: Stop containers
        if: always()
        run: |
          make down
          sleep 2

      - name: Cleanup Docker
        if: always()
        run: |
          c=$(docker ps -q) && [[ $c ]] && docker kill $c
          docker system prune --force

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Output-${{ matrix.php }}-twig
          path: |
            ./source/test-module/tests/Codeception/_output/
